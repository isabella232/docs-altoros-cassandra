---
title: Using Altoros Cassandra for Pivotal Platform
owner: Partners
---

This topic describes how to use Altoros Cassandra for Pivotal Platform after it has been installed.

##<a id='using'></a> Use Altoros Cassandra for Pivotal Platform with an App

To use Altoros Cassandra for Pivotal Platform with an app, follow the procedures in this section to create a service instance and bind the service instance
to your app. For more information about managing service instances, see <a href="https://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

### <a id="list"></a>View the Service

After the tile has been installed, `apache-cassandra` and its service
plans appear in your Marketplace. Run `cf marketplace` to
see the service listing.

<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK

service            plans   description
apache-cassandra   free    Open source distributed database management system
</pre>

### <a id="create"></a> Create a Service Instance

Use `cf create-service` to provision a keyspace.

<pre class="terminal">
$ cf create-service apache-cassandra free apache-cassandra
</pre>

Check the creation status using `cf services`. This displays a list of all your service instances. To check the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### <a id="bind"></a>Bind the Service Instance to an App

After you have created your keyspace, run
`cf bind-service` to bind the service to your app.

<pre class="terminal">
$ cf bind-service sample-app apache-cassandra
</pre>

### <a id="restart"></a>Restage or Restart Your App

To enable your app to access the service instance, run `cf restage` or `cf restart` to restage or restart your app.

### <a id="obtain"></a>Obtain Service Instance Access Credentials

After you have bound your service instance to your app, you can find the credentials of your Apache Cassandra
user in the environment variables of the app.

Run `cf env APP-NAME` to display environment variables. The credentials are listed under
the <a href="https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env sample-app
Getting env variables for app sample-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "apache-cassandra": [
   {
    "credentials": {
     "cql_port": 9042,
     "keyspace": "cf324d37765887be691263",
     "nodes": [
      "192.168.112.26",
      "192.168.112.27",
      "192.168.112.28"
     ],
     "password": "dfa55d87b422d3fbc308",
     "thrift_port": 9160,
     "username": "cf-e01038e30d0f68441d41"
    },
    "label": "apache-cassandra",
    "name": "apache-cassandra",
    "plan": "free",
    "provider": null,
    "syslog_drain_url": null,
    "tags": [
     "nosql",
     "database"
    ],
    "volume_mounts": []
   }
  ]
 }
 }
...
</pre>

You can use these parameters to connect to Apache Cassandra.

##<a id='deleting'></a> Delete an Altoros Cassandra for Pivotal Platform Service Instance

<p class="note warning"><strong>WARNING!</strong> Before deleting a service instance, you must back up the data stored in your keyspace. This operation cannot be undone, and all the data is lost when the service is deleted.</p>

Follow the instructions below to unbind your service instance from all apps and delete it.

### <a id="list2"></a>List Available Services

Run `cf service` to list your available services.

<pre class="terminal">
$ cf service

Getting services in org test / space test as admin...
OK

name               service             plan    bound apps   last operation
apache-cassandra   apache-cassandra    free    sample-app   create succeeded
</pre>

This example shows that `apache-cassandra` is bound to the `sample-app` app.

### <a id="unbind"></a>Unbind a Service Instance

Run `cf unbind` to unbind the service from your app:

<pre class="terminal">
$ cf unbind-service sample-app apache-cassandra
</pre>

### <a id="delete"></a>Delete a Service Instance

Run `cf delete-service` to delete the service.

<pre class="terminal">
  $ cf delete-service apache-cassandra
</pre>

Run the `cf services` command to check the deletion status.

##<a id='manage-instances'></a> Create, Use, and Manage On-Demand Service Instances

In order to use the Cassandra On-Demand Service Broker, do the following:

1. Set your API endpoint to the Cloud Controller of your deployment.
  <pre class="terminal">
  $ cf api api.YOUR-SYSTEM-DOMAIN
  Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
  OK
  API endpoint:  <span>https:</span>//api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
  Not logged in. Use 'cf login' to log in.
  </pre>
1. Log into your deployment and select an org and a space.
  <pre class="terminal">
  $ cf login
  API endpoint: <span>https:</span>//api.YOUR-SYSTEM-DOMAIN
  Email> user<span>@</span>example.com
  Password>
</pre>
1. List the Marketplace services and locate the Cassandra On-Demand Service.
	<pre class="terminal">
	$ cf marketplace
	Getting services from marketplace in org example / space development as user<span>@</span>example.com...
	OK

	service       		    plans          description
	cassandra-on-demand   single_node    Apache Cassandra On-Demand
</pre>
1. Create an instance of the Apache Cassandra On-Demand Service.
   Currently only single_node service plan is supported.

	<pre class="terminal">
	$ cf create-service cassandra-on-demand single_node YOUR-SERVICE-INSTANCE
	Creating service instance YOUR-SERVICE-INSTANCE in org example / space development as user@example.com...
	OK
</pre>


1. Before binding the app, first check that the service was created.
You can do this by using: `cf service INSTANCE_NAME`.

1. Bind your application to the service instance.

	<pre class="terminal">
	$ cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
	Binding service YOUR-SERVICE-INSTANCE to app YOUR-APP in org example / space development as user@example.com...
	OK
	TIP: Use 'cf restage YOUR-APP' to ensure your env variable changes take effect
</pre>



1. Restage the app for the binding to take effect.

	<pre class="terminal">
	$ cf restage YOUR-APP
</pre>

1. Execute `cf env YOUR-APP` command.
   This step allows you to review environment variables that the Cassandra On-Demand Broker sets
for your application. This environment variable has the following format:

    ```
    {
       "cql_port": "9042",
       "hostname": "10.0.8.4",
       "keyspace": "service_instance_keyspace",
       "password": "9a4a27ec-48d5-4faf-66a7-fd169c1aaf98",
       "thrift_port": "9160",
       "username": "cloud_admin"
    }
    ```
